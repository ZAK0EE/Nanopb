/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_MESSAGE_PB_H_INCLUDED
#define PB_MESSAGE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Example {
    uint32_t value;
} Example;

typedef struct _Example_second {
    uint32_t value;
} Example_second;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Example_init_default                     {0}
#define Example_second_init_default              {0}
#define Example_init_zero                        {0}
#define Example_second_init_zero                 {0}

/* Field tags (for use in manual encoding/decoding) */
#define Example_value_tag                        1
#define Example_second_value_tag                 1

/* Struct field encoding specification for nanopb */
#define Example_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   value,             1)
#define Example_CALLBACK NULL
#define Example_DEFAULT NULL

#define Example_second_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   value,             1)
#define Example_second_CALLBACK NULL
#define Example_second_DEFAULT NULL

extern const pb_msgdesc_t Example_msg;
extern const pb_msgdesc_t Example_second_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Example_fields &Example_msg
#define Example_second_fields &Example_second_msg

/* Maximum encoded size of messages (where known) */
#define Example_second_size                      6
#define Example_size                             6
#define MESSAGE_PB_H_MAX_SIZE                    Example_size

/* Message IDs (where set with "msgid" option) */
#define PB_MSG_104 Example
#define PB_MSG_224 Example_second

#define MESSAGE_MESSAGES \
	PB_MSG(104,6,Example) \
	PB_MSG(224,6,Example_second) \

#define Example_msgid 104
#define Example_second_msgid 224

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
